<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dili.uap.dao.DepartmentMapper">
  <resultMap id="BaseResultMap" type="com.dili.uap.sdk.domain.Department">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="parent_id" jdbcType="BIGINT" property="parentId" />
    <result column="firm_code" jdbcType="VARCHAR" property="firmCode" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="code" jdbcType="VARCHAR" property="code" />
    <result column="department_type" jdbcType="INTEGER" property="departmentType" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="created_id" jdbcType="BIGINT" property="createdId" />
    <result column="created" jdbcType="TIMESTAMP" property="created" />
    <result column="modified" jdbcType="TIMESTAMP" property="modified" />
    <result column="modified_id" jdbcType="BIGINT" property="modifiedId" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
    -->
    id, parent_id, firm_code, name, code, department_type, description, created_id, created, 
    modified, modified_id
  </sql>

  <select id="queryDepartments" parameterType="com.dili.uap.sdk.domain.Department" resultMap="BaseResultMap">
    SELECT
        id
        ,firm_code
        ,parent_id
    FROM
    department
    <where>
        <if test="firmCode != null and firmCode != ''">
            and firm_code = #{firmCode}
        </if>
        <if test="name != null and name != ''">
            and name like <![CDATA[concat('%',#{name},'%')]]>
        </if>
        <if test="departmentType != null and departmentType != ''">
            and department_type = #{departmentType}
        </if>
    </where>
  </select>

  <select id="selectBy" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
    -->
    select
    <include refid="Base_Column_List" />
    from department
    where id = #{id,jdbcType=BIGINT}
  </select>

    <!-- 根据firmcode查询部门 -->
    <select id="listDepartments" parameterType="map" resultType="map">
        SELECT
        concat('firm_',code) AS id
        ,null AS parentId
        ,code AS firmCode
        ,name AS name
        ,null AS code
        ,null AS description
        ,null AS created_id
        ,null AS created
        ,null AS modified
        ,null AS modified_id
        ,null AS departmentType
        FROM
        firm
        <if test="firmCode != null and firmCode != ''">
            WHERE code = #{firmCode}
        </if>
        union all

        SELECT
        concat('department_',id) AS id
        ,case when parent_id is null then concat('firm_',firm_code) else concat('department_',parent_id) end as parentId
        , firm_code AS firmCode, name, code, description, created_id, created, modified,
        modified_id,department_type AS departmentType
        FROM
        department d
        WHERE 1=1
        <if test="firmCode != null and firmCode != ''">
            and d.firm_code = #{firmCode}
        </if>
        <if test="name != null and name != ''">
            and d.name like <![CDATA[concat('%',#{name},'%')]]>
        </if>
        <if test="departmentType != null and departmentType != ''">
            and d.department_type = #{departmentType}
        </if>
        <if test="sort !=null">
            ORDER BY `${sort}`
            <if test="order !=null">
                ${order}
            </if>
        </if>
    </select>

    <!-- 查询部门列表及其所属市场 -->
    <select id="getDepartmentTree" parameterType="map" resultType="map">
        SELECT
        concat('firm_',code) AS id
        ,null AS parentId
        ,code AS firmCode
        ,name AS name
        ,null AS code
        ,null AS description
        ,null AS created_id
        ,null AS created
        ,null AS modified
        ,null AS modified_id
        ,null AS departmentType
        FROM
        firm
        <if test="firmCodeSet != null">
            WHERE code IN
            <foreach open="(" close=")" collection="firmCodeSet" item="code" separator=",">
                #{code}
            </foreach>
        </if>

        UNION ALL

        SELECT
        concat('department_',id) AS id
        ,case when parent_id is null then concat('firm_',firm_code) else concat('department_',parent_id) end as parentId
        , firm_code AS firmCode, name, code, description, created_id, created, modified,
        modified_id,department_type AS departmentType
        FROM
        department d
        <if test="connectiveSet != null">
            WHERE d.id IN
            <foreach open="(" close=")" collection="connectiveSet" item="id" separator=",">
                #{id}
            </foreach>
        </if>

        <if test="sort !=null">
            ORDER BY `${sort}`
            <if test="order !=null">
                ${order}
            </if>
        </if>
    </select>

	<select id="getChildDepartments" parameterType="java.lang.Long" resultMap="BaseResultMap">
		{call getChildDepartments(#{id})}
	</select>

	<select id="getDepartmentParentList" parameterType="java.lang.String" resultType="java.lang.String">
        <foreach open="(" close=")" collection="set" item="id" separator="UNION ALL">
		     select getDepartmentParentList(#{id})
        </foreach>
	</select>

    <!-- 根据市场查询部门列表 -->
    <select id="listUserDepartment" parameterType="java.lang.String" resultType="map">
		 (SELECT
	        ( SELECT concat( 'department_', d.`id` ) ) id
            ,CASE WHEN d.`parent_id` IS NULL THEN concat( 'firm_', d.`firm_code` )
            ELSE concat( 'department_', d.`parent_id` ) END parentId
            ,concat(d.`name`,'(',count( u.`id` ),')') name
            ,d.`firm_code` firmCode
        FROM
            `department` d
            LEFT JOIN `user` u ON d.`id` = u.`department_id`
        <if test="firmCode !=null and firmCode !=''">
        WHERE
            d.`firm_code` = #{firmCode}
        </if>
        GROUP BY
            d.id)
        UNION ALL
        (SELECT
            concat( 'firm_', f.`code` ) id
            ,f.`parent_id`
            ,concat(f.`name`,'(',count(u.`id` ),')') name
            ,u.`firm_code` firmCode
        FROM
            `firm` f LEFT JOIN `user` u ON f.`code` = u.`firm_code`
        <if test="firmCode !=null and firmCode !=''">
        WHERE
            code = #{firmCode}
        </if>
        GROUP BY f.code)
	</select>

    <select id="getSeniorDepartmentIds" resultType="Long">
		SELECT DISTINCT(parent_id) FROM department WHERE parent_id IS NOT NULL
	</select>
</mapper>